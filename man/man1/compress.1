.\"	@(#)compress.1	6.6 (Berkeley) 6/2/02
.\"
.TH COMPRESS 1 "June 2, 2002"
.UC 6
.SH NAME
compress, uncompress, zcat \- compress and expand data
.SH SYNOPSIS
.PU
.ll +8
.B compress
[
.B \-fvcs
] [
.B \-b
.I bits
] [
.B \-l
.I level
] [
.I "name \&..."
]
.ll -8
.br
.B uncompress
[
.B \-fvc
] [
.I "name \&..."
]
.br
.B zcat
[
.I "name \&..."
]
.SH DESCRIPTION
.I Compress
reduces the size of the named files using adaptive Lempel-Ziv coding.
Whenever possible,
each file is replaced by one with the extension
.B "\&.Z,"
while keeping the same ownership modes, access and modification times.
If no files are specified, the standard input is compressed to the
standard output.
Compressed files can be restored to their original form using
.I uncompress
or
.I zcat.
.PP
The
.B \-f
option will force compression of
.IR name ,
even if it does not actually shrink
or the corresponding
.IR name .Z
file already exists.
Except when run in the background under
.IR /bin/sh ,
if
.B \-f
is not given the user is prompted as to whether an existing
.IR name .Z
file should be overwritten.
.PP
The
.B \-c
(``cat'') option makes
.I compress/uncompress
write to the standard output; no files are changed.
The nondestructive behavior of
.I zcat
is identical to that of
.I uncompress
.BR \-c .
.PP
.I Compress
uses the modified Lempel-Ziv algorithm popularized in
"A Technique for High Performance Data Compression",
Terry A. Welch,
.I "IEEE Computer,"
vol. 17, no. 6 (June 1984), pp. 8-19.
Common substrings in the file are first replaced by 9-bit codes 257 and up.
When code 512 is reached, the algorithm switches to 10-bit codes and
continues to use more bits until the
limit specified by the
.B \-b
flag is reached (default 16).
.I Bits
must be between 9 and 16.  The default can be changed in the source to allow
.I compress
to be run on a smaller machine.
.PP
After the
.I bits
limit is attained,
.I compress
periodically checks the compression ratio.  If it is increasing,
.I compress
continues to use the existing code dictionary.  However,
if the compression ratio decreases,
.I compress
discards the table of substrings and rebuilds it from scratch.  This allows
the algorithm to adapt to the next "block" of the file.
.PP
Note that the
.B \-b
flag is omitted for
.IR uncompress ,
since the 
.I bits
parameter specified during compression
is encoded within the output, along with
a magic number to ensure that neither decompression of random data nor
recompression of compressed data is attempted. 
.PP
The amount of compression obtained depends on the size of the
input, the number of
.I bits
per code, and the distribution of common substrings.
Typically, text such as source code or English
is reduced by 50\-60%.
Compression is generally much better than that achieved by
Huffman coding (as used in
.IR pack ),
or adaptive Huffman coding
.RI ( compact ),
and takes less time to compute.
.PP
If the
.B \-s
option is given,
instead of using the modified Lempel-Ziv algorithm described above (also known
as LZW for Lempel-Ziv-Welch),
.I compress
uses the original Lempel-Ziv algorithm (LZ77).
Instead of assigning an
.IR n -bit
code to each compressed away common substring, which very quickly burns up the
code space and causes a switch to longer less efficient codes,
.I compress
.B \-s
references common substrings by a {distance, length} pointer
in the data stream.
All symbols emitted into the compressed data stream (literals, distances, and
lengths) are Huffman coded.
Compared to the original
.I compress
LZW algorithm, this version of Lempel-Ziv compression, known as deflation,
is slower but generally produces a better compression ratio.
It is therefore termed strong compression.
.PP
The output of
.I compress
.B \-s
consists of a magic number, deflated data in the format defined in Internet
RFC 1951, and 8 check bytes recording CRC-32 and size in bytes of the original
file, used by
.I uncompress
for verification.
.PP
The
.B \-s
option is not needed for
.I uncompress
as it detects the strong compressed format by its magic number.
The
.B \-s
option does not change any other aspect of
.I compress
operation besides the compression algorithm,
nor does use on strong compressed data change any of the behavior of
.IR uncompress .
The
.B \-b
option is ignored with
.BR \-s .
.PP
A compression
.I level
may be specified with
.BR \-l .
It is a number between 0 and 9 telling
.I compress
how hard it should work to try to find and take advantage of all compression
opportunities.
Smaller numbers result in faster compression, but some compression
opportunities may be missed that would have been found and used with higher
compression levels, affecting the compression ratio.
The compression level is meaningful only for strong compression and is ignored
in the default LZW mode.
0 indicates no compression, just store the data in the RFC 1951 deflate format.
The default compression level is 6.
.PP
The
.B \-l
option is ignored by
.IR uncompress ,
and the compression level is not stored in the compressed file,
as it does not affect the general format of the compressed data or the actions
required for decompression.
.PP
The
.B \-v
option causes
the printing of the percentage reduction of each file.
.PP
If an error occurs, exit status is 1, else
if the last file was not compressed because it became larger, the status
is 2; else the status is 0.
.SH DIAGNOSTICS
Usage: compress [\-fvcs] [\-b maxbits] [\-l level] [file ...]
.in +8
Invalid options were specified on the command line.
.in -8
Missing maxbits
.in +8
Maxbits must follow
.BR \-b \.
.in -8
Missing level
.in +8
Level must follow
.BR \-l \.
.in -8
.IR file :
not in compressed format
.in +8
The file specified to
.I uncompress
has not been compressed.
.in -8
.IR file :
compressed with 
.I xx
bits, can only handle 
.I yy
bits
.in +8
.I File
was compressed by a program that could deal with
more 
.I bits
than the compress code on this machine.
Recompress the file with smaller
.IR bits \.
.in -8
.IR file :
already has .Z suffix -- no change
.in +8
The file is assumed to be already compressed.
Rename the file and try again.
.in -8
.IR file :
filename too long to tack on .Z
.in +8
The file cannot be compressed because its name is longer than
12 characters.
Rename and try again.
This message does not occur on BSD systems.
.in -8
.I file
already exists; do you wish to overwrite (y or n)?
.in +8
Respond "y" if you want the output file to be replaced; "n" if not.
.in -8
uncompress: corrupt input
.in +8
A SIGSEGV violation was detected which usually means that the input file is
corrupted.
.in -8
Compression: 
.I "xx.xx%"
.in +8
Percentage of the input saved by compression.
(Relevant only for
.BR \-v \.)
.in -8
-- not a regular file: unchanged
.in +8
When the input file is not a regular file,
(e.g. a directory), it is
left unaltered.
.in -8
-- has 
.I xx 
other links: unchanged
.in +8
The input file has links; it is left unchanged.  See
.IR ln "(1)"
for more information.
.in -8
-- file unchanged
.in +8
No savings is achieved by
compression.  The input remains virgin.
.in -8
.SH BUGS
Although compressed files are compatible between machines with large memory,
.BR \-b \12
should be used for file transfer to architectures with 
a small process data space (64KB or less, as exhibited by the DEC PDP
series, the Intel 80286, etc.)
.PP
.I compress
should be more flexible about the existence of the `.Z' suffix.
.SH SEE ALSO
gzcompat(1)
